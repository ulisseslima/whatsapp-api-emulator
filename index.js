require("dotenv").config();
const express = require("express");
const bodyParser = require("body-parser");
const axios = require("axios");
const { createMachine, createActor, assign } = require("xstate");

const app = express();
const PORT = process.env.PORT || 3000;

app.use(bodyParser.json());

// In-memory storage for user data and state machines
const userStateMachines = new Map(); // Stores XState interpreters for each user
const users = new Map(); // in-memory user database
const occurrences = new Map(); // in-memory occurrences database
let occurrenceCounter = 1;

const USER_STATUS = {
    TERMS_NOT_ACCEPTED: 'terms_not_accepted',
    PRE_REGISTERED: 'pre_registered',
    REGISTRATION_PENDING: 'registration_pending',
    APPROVAL_PENDING: 'approval_pending',
    APPROVED: 'approved',
    REJECTED: 'rejected'
};

const OCCURRENCE_STATUS = {
    IN_PROGRESS: 'in_progress',
    WAITING_RESPONSE: 'waiting_response',
    RESOLVED: 'resolved',
    CANCELLED: 'cancelled'
};

// XState machine definition for conversation flow
const conversationMachine = createMachine({
    id: 'whatsappBot',
    initial: 'checkingTerms',
    context: {
        phone: null,
        userName: '',
        userEmail: '',
        userBlock: '',
        userUnit: '',
        occurrenceData: {},
        feedbackData: {}
    },
    states: {
        checkingTerms: {
            on: {
                TERMS_NEEDED: 'waitingTermsAcceptance',
                TERMS_ACCEPTED: 'checkingUserStatus',
                USER_EXISTS: 'checkingUserStatus'
            }
        },
        waitingTermsAcceptance: {
            on: {
                ACCEPT_TERMS: 'checkingUserStatus',
                REJECT_TERMS: 'termsRejected'
            }
        },
        termsRejected: {
            type: 'final'
        },
        checkingUserStatus: {
            on: {
                PRE_REGISTERED: 'waitingDataConfirmation',
                NEW_USER: { 
                    target: 'waitingName', actions: assign({
                        userName: ({ event }) => event.data
                    })
                },
                APPROVED: 'mainMenu',
                PENDING: 'registrationPending',
                REJECTED: 'registrationRejected'
            }
        },
        waitingName: {
            on: {
                PROVIDE_NAME: {
                    target: 'waitingEmail',
                    actions: assign({
                        userName: ({ event }) => event.data
                    })
                }
            }
        },
        waitingEmail: {
            on: {
                PROVIDE_EMAIL: {
                    target: 'waitingBlock',
                    actions: assign({
                        userEmail: ({ event }) => event.data
                    })
                }
            }
        },
        waitingBlock: {
            on: {
                PROVIDE_BLOCK: {
                    target: 'waitingUnit',
                    actions: assign({
                        userBlock: ({ event }) => event.data
                    })
                }
            }
        },
        waitingUnit: {
            on: {
                PROVIDE_UNIT: {
                    target: 'waitingDataConfirmation',
                    actions: assign({
                        userUnit: ({ event }) => event.data
                    })
                }
            }
        },
        waitingDataConfirmation: {
            on: {
                CONFIRM_DATA: 'mainMenu',
                EDIT_DATA: 'waitingName',
                SUBMIT_REGISTRATION: 'registrationPending'
            }
        },
        registrationPending: {
            on: {
                APPROVE_USER: 'mainMenu',
                REJECT_USER: 'registrationRejected'
            }
        },
        registrationRejected: {
            type: 'final'
        },
        mainMenu: {
            on: {
                START_OCCURRENCE: { 
                    target: 'waitingOccurrenceDescription', 
                    actions: assign({
                        occurrenceData: ({ event }) => event.data
                    })
                },
                VIEW_OCCURRENCES: 'viewingOccurrences',
                OCCURRENCE_RESOLVED: 'waitingFeedback'
            }
        },
        waitingOccurrenceDescription: {
            on: {
                PROVIDE_DESCRIPTION: {
                    target: 'waitingOccurrenceMedia',
                    actions: assign({
                        occurrenceData: {
                            description: ({ event }) => event.data
                        }
                    })
                }
            }
        },
        waitingOccurrenceMedia: {
            on: {
                PROVIDE_MEDIA: {
                    target: 'mainMenu',
                    actions: assign({
                        occurrenceData: ({ event }) => event.data
                    })
                },
                NO_MEDIA: {
                    target: 'mainMenu',
                    actions: assign({
                        occurrenceData: ({ event }) => event.data
                    })
                }
            }
        },
        viewingOccurrences: {
            on: {
                BACK_TO_MENU: 'mainMenu'
            }
        },
        waitingFeedback: {
            on: {
                PROVIDE_FEEDBACK: {
                    target: 'waitingFeedbackComment',
                    actions: 'storeFeedback'
                }
            }
        },
        waitingFeedbackComment: {
            on: {
                PROVIDE_COMMENT: 'mainMenu',
                SKIP_COMMENT: 'mainMenu'
            }
        }
    }
}, {
    actions: {
        storeUser: (context, event) => {
            context.userData = event.data;
        },
        storeOccurrence: (context, event) => {
            context.occurrenceData = event.data;
        },
        storeName: (context, event) => {
            context.userData.name = event.data;
        },
        storeEmail: (context, event) => {
            context.userData.email = event.data;
        },
        storeBlock: (context, event) => {
            context.userData.block = event.data;
        },
        storeUnit: (context, event) => {
            context.userData.unit = event.data;
        },
        storeDescription: (context, event) => {
            context.occurrenceData.description = event.data;
        },
        createOccurrence: (context, event) => {
            context.occurrenceData.mediaUrl = event.data || null;
        },
        storeFeedback: (context, event) => {
            context.feedbackData.rating = event.data;
        }
    }
});

// Sample pre-registered users
users.set('5511999999999', {
    phone: '5511999999999',
    name: 'Jo√£o Silvan',
    email: 'joao@email.com',
    block: 'A',
    unit: '101',
    status: USER_STATUS.PRE_REGISTERED,
    termsAccepted: false,
    termsVersion: null,
    termsAcceptedAt: null
});

// Helper function to generate occurrence protocol
function generateProtocol() {
    const now = new Date();
    const year = now.getFullYear();
    const month = String(now.getMonth() + 1).padStart(2, '0');
    const day = String(now.getDate()).padStart(2, '0');
    const hour = String(now.getHours()).padStart(2, '0');
    const minute = String(now.getMinutes()).padStart(2, '0');
    const second = String(now.getSeconds()).padStart(2, '0');
    const id = String(occurrenceCounter++).padStart(3, '0');
    
    return `${year}${month}${day}-${hour}${minute}${second}-${id}`;
}

// Helper function to send WhatsApp message
async function sendWhatsAppMessage(to, message) {
    // Use mock API in development
    const baseUrl = process.env.NODE_ENV === 'production' 
        ? `https://graph.facebook.com/${process.env.WABA_API_VERSION}`
        : process.env.MOCK_WHATSAPP_URL || `http://localhost:3001/${process.env.WABA_API_VERSION}`;
    try {
        
        await axios.post(
            `${baseUrl}/${process.env.PHONE_NUMBER_ID}/messages`,
            {
                messaging_product: "whatsapp",
                to: to,
                text: { body: message }
            },
            {
                headers: {
                    Authorization: `Bearer ${process.env.ACCESS_TOKEN}`,
                    "Content-Type": "application/json"
                }
            }
        );
        console.log(`Message sent to ${to}: ${message}`);
    } catch (error) {
        console.error(`[${baseUrl}] Error sending message to ${to}:`, error.response?.data || error.message);
    }
}

// Helper function to send WhatsApp message with buttons
async function sendWhatsAppInteractiveMessage(to, text, buttons) {
    // Use mock API in development
    const baseUrl = process.env.NODE_ENV === 'production' 
        ? `https://graph.facebook.com/${process.env.WABA_API_VERSION}`
        : process.env.MOCK_WHATSAPP_URL || `http://localhost:3001/${process.env.WABA_API_VERSION}`;
    try {
        
        await axios.post(
            `${baseUrl}/${process.env.PHONE_NUMBER_ID}/messages`,
            {
                messaging_product: "whatsapp",
                to: to,
                type: "interactive",
                interactive: {
                    type: "button",
                    body: { text: text },
                    action: {
                        buttons: buttons
                    }
                }
            },
            {
                headers: {
                    Authorization: `Bearer ${process.env.ACCESS_TOKEN}`,
                    "Content-Type": "application/json"
                }
            }
        );
        console.log(`Interactive message sent to ${to}`);
    } catch (error) {
        console.error(`[${baseUrl}] Error sending interactive message to ${to}:`, error.response?.data || error.message);
    }
}

// Helper function to send WhatsApp list message
async function sendWhatsAppListMessage(to, text, buttonText, sections, header = null, footer = null) {
    // Use mock API in development
    const baseUrl = process.env.NODE_ENV === 'production' 
        ? `https://graph.facebook.com/${process.env.WABA_API_VERSION}`
        : process.env.MOCK_WHATSAPP_URL || `http://localhost:3001/${process.env.WABA_API_VERSION}`;
    
    try {
        const interactive = {
            type: "list",
            body: { text: text },
            action: {
                button: buttonText,
                sections: sections
            }
        };

        if (header) {
            interactive.header = { type: "text", text: header };
        }

        if (footer) {
            interactive.footer = { text: footer };
        }
        
        await axios.post(
            `${baseUrl}/${process.env.PHONE_NUMBER_ID}/messages`,
            {
                messaging_product: "whatsapp",
                to: to,
                type: "interactive",
                interactive: interactive
            },
            {
                headers: {
                    Authorization: `Bearer ${process.env.ACCESS_TOKEN}`,
                    "Content-Type": "application/json"
                }
            }
        );
        console.log(`List message sent to ${to}`);
    } catch (error) {
        console.error(`[${baseUrl}] Error sending list message to ${to}:`, error.response?.data || error.message);
    }
}

// Snippet A: Emergency Alert
const EMERGENCY_ALERT = `‚ö†Ô∏è **ATEN√á√ÉO: EM CASO DE EMERG√äNCIA, N√ÉO USE ESTE CANAL.**
Para situa√ß√µes como vazamentos de g√°s, inc√™ndios, problemas graves de seguran√ßa ou emerg√™ncias m√©dicas, LIGUE IMEDIATAMENTE para [N√∫mero de Emerg√™ncia do Condom√≠nio].
* * *`;

// Snippet B: App Download Invitation
const APP_INVITATION = `‚ú® DICA: Quer uma experi√™ncia completa? Baixe o app da **Zind**!
Pelo aplicativo, al√©m das ocorr√™ncias, voc√™ pode reservar √°reas comuns, ver os avisos do s√≠ndico e muito mais.
üì≤ Baixe agora:
‚Ä¢ Android: [Link para a Google Play Store]
‚Ä¢ iPhone: [Link para a Apple App Store]`;

// Get or create state machine for user
function getOrCreateStateMachine(phone) {
    if (!userStateMachines.has(phone)) {
        // interpret() deprecated
        const service = createActor(conversationMachine);
        
        service.start();
        userStateMachines.set(phone, service);
    }
    return userStateMachines.get(phone);
}

// Get current state for user
function getCurrentState(phone) {
    const service = getOrCreateStateMachine(phone);
    return service.getSnapshot().value;
}

// Send event to state machine
function sendEvent(phone, name, data = null) {
    const actor = getOrCreateStateMachine(phone);
    let event = { type: name };
    if (data) {
        event.data = data;
    }
    actor.send(event);
    
    console.log(`-> Event sent to ${phone}: ${name}`, data);
    return actor.getSnapshot().value;
}

// Clear state machine for user
function clearStateMachine(phone) {
    const service = userStateMachines.get(phone);
    if (service) {
        service.stop();
        userStateMachines.delete(phone);
    }
}

// Get context data from state machine
function getContextData(phone) {
    const service = getOrCreateStateMachine(phone);
    return service.getSnapshot().context;
}

// Check if user needs to accept terms
function needsTermsAcceptance(user) {
    return !user || !user.termsAccepted;
}

function waitingRegistration(currentState) {
    return currentState === 'waitingName' || currentState === 'waitingEmail' ||
           currentState === 'waitingBlock' || currentState === 'waitingUnit';
}

// Handle terms acceptance flow
async function handleTermsAcceptance(phone, message) {
    const user = users.get(phone) || {};
    const currentState = getCurrentState(phone);

    console.log(`Handling terms acceptance for ${phone}, current state: ${currentState}, message: ${message}`);
    
    if (currentState === 'checkingTerms') {
        // First interaction - show terms
        const welcomeMessage = `Ol√°${user.name ? `, ${user.name}` : ''}! Sou a assistente virtual do Condom√≠nio [Nome do Condom√≠nio]. Que bom te ver por aqui! Para come√ßarmos e garantirmos a transpar√™ncia e a seguran√ßa das suas informa√ß√µes, voc√™ precisa ler e aceitar nossos Termos de Uso e nossa Pol√≠tica de Privacidade.

Voc√™ pode consult√°-los aqui:
üîó Termos de Uso: (link)
üîí Pol√≠tica de Privacidade: (link)

Ao aceitar, voc√™ tamb√©m declara ser maior de 18 anos. Para confirmar e ativar seu acesso, por favor.`;

        await sendWhatsAppInteractiveMessage(phone, welcomeMessage, [
            { type: "reply", reply: { id: "accept_terms", title: "Aceito" } },
            { type: "reply", reply: { id: "reject_terms", title: "N√£o aceito" } }
        ]);
        
        sendEvent(phone, 'TERMS_NEEDED');
        return;
    }

    // Handle terms response
    if (message === "accept_terms") {
        // Accept terms
        if (!user.phone) {
            console.log(`Creating new user for phone ${phone}`);
            user.phone = phone;
            users.set(phone, user);
        }

        user.status = USER_STATUS.REGISTRATION_PENDING;
        user.termsAccepted = true;
        user.termsAcceptedAt = new Date();
        user.termsVersion = "1.0";
        
        await sendWhatsAppMessage(phone, "√ìtimo, obrigado por confirmar!\nSeus termos foram aceitos com sucesso. ‚úÖ");
        
        sendEvent(phone, 'ACCEPT_TERMS');
        
        // Check if user is pre-registered or new
        if (user && user.status === USER_STATUS.PRE_REGISTERED) {
            sendEvent(phone, 'PRE_REGISTERED');
            await handlePreRegisteredUser(phone);
        } else if (user && user.status === USER_STATUS.APPROVED) {
            sendEvent(phone, 'APPROVED');
            await showMainMenu(phone);
        } else {
            sendEvent(phone, 'NEW_USER', user);
            await handleNewUserRegistration(phone);
        }
    } else if (message === "reject_terms" ) {
        // Reject terms
        const rejectMessage = `Entendido.
Para garantir a seguran√ßa de todos e a conformidade com a Lei Geral de Prote√ß√£o de Dados (LGPD), o aceite dos termos √© um passo necess√°rio para podermos processar suas solicita√ß√µes por este canal.
Como os termos n√£o foram aceitos, n√£o posso dar continuidade ao seu atendimento.
Se voc√™ mudar de ideia no futuro, basta me enviar um "Ol√°" novamente para recome√ßar o processo. Tenha um √≥timo dia!`;
        
        await sendWhatsAppMessage(phone, rejectMessage);
        sendEvent(phone, 'REJECT_TERMS');
        clearStateMachine(phone);
    } else {
        // Invalid response
        await sendWhatsAppMessage(phone, `[${message}] Desculpe, n√£o entendi sua resposta. Por favor, responda com 'Aceito' ou 'N√£o aceito' para continuar.`);
        return;
    }
}

// Handle pre-registered user confirmation
async function handlePreRegisteredUser(phone) {
    const user = users.get(phone);
    console.log(`Handling pre-registered user confirmation for ${phone}`, user);

    const confirmationMessage = `Ol√°!
Identifiquei que a administra√ß√£o do Condom√≠nio [Nome do Condom√≠nio] iniciou seu cadastro em nosso canal de ocorr√™ncias. Seja bem-vindo(a)!

Para ativarmos seu acesso, por favor, confirme se os dados abaixo est√£o corretos:
‚Ä¢ Nome: ${user.name}
‚Ä¢ E-mail: ${user.email}
‚Ä¢ Bloco ${user.block}
‚Ä¢ Unidade: ${user.unit}

As informa√ß√µes est√£o corretas?`;

    await sendWhatsAppInteractiveMessage(phone, confirmationMessage, [
        { type: "reply", reply: { id: "data_correct", title: "1Ô∏è‚É£ Sim, est√£o corretas" } },
        { type: "reply", reply: { id: "data_incorrect", title: "2Ô∏è‚É£ N√£o, quero corrigir" } }
    ]);
}

// Handle new user registration
async function handleNewUserRegistration(phone) {
    console.log(`Handling new user registration for ${phone}`);

    const welcomeMessage = `Ol√°! Bem-vindo(a) ao canal oficial do Condom√≠nio [Nome do Condom√≠nio].

${EMERGENCY_ALERT}

Vejo que este √© seu primeiro acesso. Para solicitar seu cadastro, preciso de algumas informa√ß√µes. Primeiro, seu Nome Completo, por favor.`;

    await sendWhatsAppMessage(phone, welcomeMessage);
}

// Handle registration flow
async function handleRegistrationFlow(phone, message) {
    const currentState = getCurrentState(phone);
    const context = getContextData(phone);
    const user = users.get(phone) || {};

    console.log(`Handling registration flow for ${phone}, current state: ${currentState}, message: ${message}`, context);
    
    switch (currentState) {
        case 'waitingName':
            sendEvent(phone, 'PROVIDE_NAME', message);
            user.name = message;

            await sendWhatsAppMessage(phone, `Obrigado, ${message}. Agora, seu melhor e-mail.`);
            break;
            
        case 'waitingEmail':
            sendEvent(phone, 'PROVIDE_EMAIL', message);
            user.email = message;

            await sendWhatsAppMessage(phone, "Perfeito. Agora, vamos √† sua unidade. Por favor, informe o bloco. (Ex: A, B, Villa, etc.)");
            break;
            
        case 'waitingBlock':
            sendEvent(phone, 'PROVIDE_BLOCK', message);
            user.block = message;

            await sendWhatsAppMessage(phone, "√ìtimo. Agora, por favor, digite o n√∫mero do seu apartamento ou casa ou unidade (Ex: 502, 104, etc.)");
            break;
            
        case 'waitingUnit':
            sendEvent(phone, 'PROVIDE_UNIT', message);
            user.unit = message;

            const confirmationMessage = `√ìtimo. S√≥ para confirmar as informa√ß√µes:
‚Ä¢ Nome: ${user.name}
‚Ä¢ E-mail: ${user.email}
‚Ä¢ Bloco: ${user.block}
‚Ä¢ Unidade ${user.unit}

Est√° tudo correto?`;

            await sendWhatsAppInteractiveMessage(phone, confirmationMessage, [
                { type: "reply", reply: { id: "confirm_registration", title: "Confirmar" } },
                { type: "reply", reply: { id: "edit_data", title: "Refazer" } }
            ]);
            break;
    }
}

// Handle main menu
async function showMainMenu(phone) {
    const menuMessage = `Como posso ajudar hoje?`;
    
    await sendWhatsAppInteractiveMessage(phone, menuMessage, [
        { type: "reply", reply: { id: "new_occurrence", title: "1Ô∏è‚É£ üÜï Registrar Nova Ocorr√™ncia" } },
        { type: "reply", reply: { id: "view_occurrences", title: "2Ô∏è‚É£ üîé Consultar Minhas Ocorr√™ncias" } }
    ]);
}

// Handle occurrence registration
async function handleOccurrenceRegistration(phone, message, messageType = 'text') {
    const currentState = getCurrentState(phone);
    const context = getContextData(phone);

    console.log(`Handling occurrence registration for ${phone}, current state: ${currentState}, message: ${message}`);

    if (currentState === 'mainMenu' && message === "new_occurrence") {
        await sendWhatsAppMessage(phone, "Entendido. Para iniciar o registro, por favor, descreva em detalhes o que aconteceu. Tente incluir o local exato, se poss√≠vel.\n\n*Ex: O elevador social do Bloco A n√£o est√° funcionando.*");
        context.occurrenceData = {};
        sendEvent(phone, 'START_OCCURRENCE', context.occurrenceData);
    } else if (currentState === 'waitingOccurrenceDescription') {
        sendEvent(phone, 'PROVIDE_DESCRIPTION', message);
        
        const mediaMessage = `√ìtimo, obrigado pela descri√ß√£o. Se tiver uma foto, v√≠deo, √°udio, documento ou contato que ajude a ilustrar o problema, pode me enviar agora. Caso n√£o tenha, √© s√≥ selecionar "n√£o tenho".`;
        
        await sendWhatsAppInteractiveMessage(phone, mediaMessage, [
            { type: "reply", reply: { id: "no_media", title: "N√£o tenho" } }
        ]);
    } else if (currentState === 'waitingOccurrenceMedia') {
        let mediaUrl = null;
        
        if ((messageType === 'image' || messageType === 'video' || messageType === 'document' || messageType === 'audio' || messageType === 'contacts') && message !== "no_media") {
            mediaUrl = message; // In real implementation, this would be the media URL
            const mediaTypeText = messageType === 'image' ? 'imagem' : 
                                 messageType === 'video' ? 'v√≠deo' : 
                                 messageType === 'audio' ? '√°udio' : 
                                 messageType === 'contacts' ? 'contato' : 'arquivo';
            await sendWhatsAppMessage(phone, `Perfeito, ${mediaTypeText} recebido!`);
            sendEvent(phone, 'PROVIDE_MEDIA', mediaUrl);
        } else if (message === "no_media") {
            sendEvent(phone, 'NO_MEDIA');
        } else {
            // If it's a text message while waiting for media, treat it as "no media" and use the text as additional description
            await sendWhatsAppMessage(phone, "Entendi. Informa√ß√£o adicional registrada.");
            sendEvent(phone, 'NO_MEDIA', message);
        }
        
        // Create occurrence
        const protocol = generateProtocol();
        const user = users.get(phone);
        console.log(`Creating occurrence for user ${phone} with protocol ${protocol}`, user);
        const context = getContextData(phone);
        const occurrence = {
            protocol,
            description: context.occurrenceData.description,
            mediaUrl: context.occurrenceData.mediaUrl,
            status: OCCURRENCE_STATUS.IN_PROGRESS,
            createdAt: new Date(),
            updatedAt: new Date(),
            userId: phone,
            userName: user.name,
            comments: []
        };
        
        occurrences.set(protocol, occurrence);
        
        const successMessage = `Sua ocorr√™ncia foi registrada com sucesso. A equipe de gest√£o j√° foi acionada.

‚úÖ #${protocol}

**Voc√™ ser√° notificado por aqui sobre cada andamento.**

${APP_INVITATION}`;
        
        await sendWhatsAppMessage(phone, successMessage);
        
        // Return to main menu
        setTimeout(() => showMainMenu(phone), 2000);
    } else {
        console.log(`!!! ${currentState} - Unhandled state in occurrence registration for ${phone}:`, message);
    }
}

// Handle occurrence viewing
async function handleOccurrenceViewing(phone) {
    const userOccurrences = Array.from(occurrences.values()).filter(occ => occ.userId === phone);
    console.log(`Handling occurrence viewing for ${phone}, found ${userOccurrences.length} occurrences`);
    
    if (userOccurrences.length === 0) {
        await sendWhatsAppMessage(phone, "Boas not√≠cias! Verifiquei aqui e voc√™ n√£o possui nenhuma ocorr√™ncia em aberto no momento. üòä");
        setTimeout(() => showMainMenu(phone), 2000);
        return;
    }
    
    let message = "Verifiquei aqui e voc√™ possui as seguintes ocorr√™ncias:\n\n";
    
    userOccurrences.forEach((occ, index) => {
        const statusEmoji = occ.status === OCCURRENCE_STATUS.IN_PROGRESS ? '‚öôÔ∏è' : 
                           occ.status === OCCURRENCE_STATUS.WAITING_RESPONSE ? '‚ùì' : 
                           occ.status === OCCURRENCE_STATUS.RESOLVED ? '‚úÖ' : '‚ùå';
        
        const statusText = occ.status === OCCURRENCE_STATUS.IN_PROGRESS ? 'EM ANDAMENTO' :
                          occ.status === OCCURRENCE_STATUS.WAITING_RESPONSE ? 'AGUARDANDO RESPOSTA' :
                          occ.status === OCCURRENCE_STATUS.RESOLVED ? 'RESOLVIDA' : 'CANCELADA';
        
        message += `${statusEmoji} **${statusText}**\n`;
        message += `**Protocolo: #${occ.protocol}**\n`;
        message += `**Data de Abertura:** ${occ.createdAt.toLocaleDateString('pt-BR')} ${occ.createdAt.toLocaleTimeString('pt-BR', { hour: '2-digit', minute: '2-digit' })}\n`;
        message += `**√öltima Atualiza√ß√£o:** ${occ.updatedAt.toLocaleDateString('pt-BR')} ${occ.updatedAt.toLocaleTimeString('pt-BR', { hour: '2-digit', minute: '2-digit' })}\n`;
        message += `**Descri√ß√£o:** ${occ.description.substring(0, 50)}${occ.description.length > 50 ? '...' : ''}\n`;
        
        if (occ.comments.length > 0) {
            message += "**Coment√°rios**\n";
            occ.comments.forEach(comment => {
                message += `**${comment.date}:** ${comment.author}: ${comment.text}\n`;
            });
        }
        
        if (index < userOccurrences.length - 1) {
            message += "\n---\n\n";
        }
    });
    
    message += "\n\nSe desejar registrar uma nova ocorr√™ncia, digite 1.";
    
    await sendWhatsAppMessage(phone, message);
    sendEvent(phone, 'VIEW_OCCURRENCES');
    
    setTimeout(() => {
        sendEvent(phone, 'BACK_TO_MENU');
        showMainMenu(phone);
    }, 3000);
}

// Verification endpoint (GET)
app.get("/webhook", (req, res) => {
    const VERIFY_TOKEN = process.env.VERIFY_TOKEN;
    const mode = req.query["hub.mode"];
    const token = req.query["hub.verify_token"];
    const challenge = req.query["hub.challenge"];

    if (mode && token && mode === "subscribe" && token === VERIFY_TOKEN) {
        console.log("Webhook verified");
        res.status(200).send(challenge);
    } else {
        res.sendStatus(403);
    }
});

// Main message processing function
async function processMessage(phone, message, messageType = 'text') {
    const user = users.get(phone);
    const currentState = getCurrentState(phone);
    const context = getContextData(phone);
    if (user) {
        context.userData = user;
    }
    
    console.log('----------------------------------------------------------------');
    console.log(`Processing message from ${phone}: ${message} (type: ${messageType})`);
    console.log(`User status: ${user ? user.status : 'not found'}, Terms accepted: ${user ? user.termsAccepted : false}`);
    console.log(`Current XState: ${currentState}`);
    
    // Check if user needs to accept terms first
    if (needsTermsAcceptance(user)) {
        await handleTermsAcceptance(phone, message);
        return;
    }
    
    console.log('// Check if user is approved', user);
    if (!waitingRegistration(currentState) && currentState !== 'waitingDataConfirmation' && user && user.status !== USER_STATUS.APPROVED) {
        console.log(`waiting registration approval. user status: ${user.status}`, user);
        if (user.status === USER_STATUS.REGISTRATION_PENDING) {
            await sendWhatsAppMessage(phone, "Sua solicita√ß√£o de cadastro est√° sendo analisada pela administra√ß√£o. Voc√™ receber√° uma notifica√ß√£o assim que for aprovada. Obrigado pela paci√™ncia!");
            sendEvent(phone, 'PENDING');
        } else if (user.status === USER_STATUS.REJECTED) {
            await sendWhatsAppMessage(phone, "Sua solicita√ß√£o de cadastro foi rejeitada pela administra√ß√£o. Por favor, entre em contato diretamente com a administra√ß√£o para esclarecer a situa√ß√£o.");
            sendEvent(phone, 'REJECTED');
        } else {
            console.log(`User ${phone} is ${user.status} (unhandled). Current state: ${currentState}`);
        }
        return;
    }
    
    console.log('// Handle conversation flows based on current state', currentState);
    if (currentState === 'checkingUserStatus') {
        // User is approved and no active conversation - show main menu
        sendEvent(phone, 'APPROVED');
        await showMainMenu(phone);
        return;
    }
    
    switch (currentState) {
        case 'waitingDataConfirmation':
            if (message === "data_correct" || message === "sim, est√£o corretas") {
                // Data confirmed - approve user
                user.status = USER_STATUS.APPROVED;
                sendEvent(phone, 'CONFIRM_DATA');
                await showMainMenu(phone);
            } else if (message === "edit_data" || message === "n√£o, quero corrigir") {
                // User wants to edit data - start registration flow
                sendEvent(phone, 'EDIT_DATA');
                await handleNewUserRegistration(phone);
            } else if (message === "confirm_registration") {
                // New user registration confirmed
                const user = context.userData;
                user.status = USER_STATUS.APPROVAL_PENDING;
                
                // Create new user with pending status
                console.log(`Creating new user with phone: ${phone}, data:`, user);
                users.set(phone, user);
                
                await sendWhatsAppMessage(phone, "Perfeito! ‚úÖ\nSua solicita√ß√£o de cadastro foi enviada com sucesso para a administra√ß√£o do condom√≠nio. Voc√™ receber√° uma nova mensagem por aqui assim que seu acesso for aprovado. Geralmente, isso leva algumas horas. Agradecemos a sua paci√™ncia!");
                sendEvent(phone, 'SUBMIT_REGISTRATION');
            } else {
                console.log(`User ${phone} (waitingDataConfirmation) - unhandled message: ${message}`);
            }
            break;
            
        case 'waitingName':
        case 'waitingEmail':
        case 'waitingBlock':
        case 'waitingUnit':
            await handleRegistrationFlow(phone, message);
            break;
            
        case 'mainMenu':
            if (message === "new_occurrence" || message === "1") {
                await handleOccurrenceRegistration(phone, message);
            } else if (message === "view_occurrences" || message === "2") {
                await handleOccurrenceViewing(phone);
            } else {
                await sendWhatsAppMessage(phone, "Desculpe, n√£o entendi essa op√ß√£o. Por favor, escolha um dos itens do menu digitando o n√∫mero correspondente.");
                setTimeout(() => showMainMenu(phone), 2000);
            }
            break;
            
        case 'waitingOccurrenceDescription':
        case 'waitingOccurrenceMedia':
            await handleOccurrenceRegistration(phone, message, messageType);
            break;
            
        case 'waitingFeedback':
            // Handle feedback response
            const feedbackMap = {
                "1": "Excelente",
                "2": "Bom", 
                "3": "Regular",
                "4": "Ruim",
                "5": "P√©ssimo",
                "feedback_excellent": "Excelente",
                "feedback_good": "Bom",
                "feedback_regular": "Regular", 
                "feedback_bad": "Ruim",
                "feedback_terrible": "P√©ssimo"
            };
            
            const feedbackValue = feedbackMap[message];
            if (feedbackValue) {
                await sendWhatsAppMessage(phone, `Muito obrigado pelo seu feedback: ${feedbackValue}!\n\nSe desejar fazer um coment√°rio adicional, pode envi√°-lo agora. Caso contr√°rio, digite "menu" para voltar ao menu principal.`);
                sendEvent(phone, 'PROVIDE_FEEDBACK', feedbackValue);
            }
            break;
            
        case 'waitingFeedbackComment':
            if (message.toLowerCase() === "menu") {
                await sendWhatsAppMessage(phone, "Obrigado pelo seu tempo!");
                sendEvent(phone, 'SKIP_COMMENT');
                setTimeout(() => showMainMenu(phone), 1000);
            } else {
                await sendWhatsAppMessage(phone, "Muito obrigado pelo seu coment√°rio!\n\nSeu feedback √© muito importante para n√≥s.");
                sendEvent(phone, 'PROVIDE_COMMENT', message);
                setTimeout(() => showMainMenu(phone), 2000);
            }
            break;
            
        default:
            // Handle error/unknown commands for approved users
            await sendWhatsAppMessage(phone, `Desculpe, n√£o entendi essa op√ß√£o. Por favor, escolha um dos itens do menu digitando o n√∫mero correspondente.`);

            // // Unknown state - reset to main menu for approved users
            // if (user && user.status === USER_STATUS.APPROVED) {
            //     sendEvent(phone, 'APPROVED');
            //     await showMainMenu(phone);
            // }
            break;
    }
}

// Message handler (POST)
app.post("/webhook", async (req, res) => {
    const entry = req.body.entry?.[0];
    const changes = entry?.changes?.[0];
    const message = changes?.value?.messages?.[0];

    console.log("Received webhook event:", JSON.stringify(req.body, null, 2));

    if (message) {
        const from = message.from;
        let msgBody = null;
        let messageType = 'text';
        
        // Handle different message types
        if (message.text) {
            msgBody = message.text.body;
            messageType = 'text';
        } else if (message.image) {
            msgBody = message.image.caption || 'Image';
            messageType = 'image';
            console.log(`Received image from ${from}: ${message.image.id}`);
        } else if (message.video) {
            msgBody = message.video.caption || 'Video';
            messageType = 'video';
            console.log(`Received video from ${from}: ${message.video.id}`);
        } else if (message.document) {
            msgBody = message.document.caption || message.document.filename || 'Document';
            messageType = 'document';
            console.log(`Received document from ${from}: ${message.document.id}`);
        } else if (message.audio) {
            msgBody = 'Audio message';
            messageType = 'audio';
            console.log(`Received audio from ${from}: ${message.audio.id}`);
        } else if (message.contacts) {
            msgBody = `Contact: ${message.contacts[0]?.name?.formatted_name || 'Unknown'}`;
            messageType = 'contacts';
            console.log(`Received contact from ${from}: ${message.contacts[0]?.name?.formatted_name}`);
        } else if (message.image) {
            msgBody = message.image.id; // In real implementation, download and process the image
            messageType = 'image';
        } else if (message.interactive) {
            // Handle button responses
            if (message.interactive.button_reply) {
                const buttonId = message.interactive.button_reply.id;
                msgBody = buttonId;
            } else if (message.interactive.list_reply) {
                const listRowId = message.interactive.list_reply.id;
                msgBody = listRowId;
            } else {
                console.log(`!!! Unhandled interactive message from ${from}:`, message.interactive);
            }
        } else {
            console.log(`!!! Unhandled message type from ${from}:`, message);
        }

        if (msgBody) {
            console.log(`Received message: ${msgBody} from ${from} (type: ${messageType})`);
            await processMessage(from, msgBody, messageType);
        }
    }

    res.sendStatus(200);
});

// Session cleanup - remove inactive sessions every 30 minutes
setInterval(() => {
    const now = new Date();
    const thirtyMinutesAgo = new Date(now.getTime() - 30 * 60 * 1000);
    
    for (const [phone, service] of userStateMachines.entries()) {
        // Check if service is still running and get last activity
        if (service.getSnapshot) {
            const snapshot = service.getSnapshot();
            // In a real implementation, you'd track lastActivity in context
            // For now, we'll clean up machines that are in final states
            if (snapshot.done || snapshot.value === 'termsRejected' || snapshot.value === 'registrationRejected') {
                console.log(`Cleaning up completed session for ${phone}`);
                service.stop();
                userStateMachines.delete(phone);
            }
        }
    }
}, 30 * 60 * 1000); // Run every 30 minutes

// API endpoints for external systems to trigger notifications
app.post("/api/users/approve", async (req, res) => {
    const { phone } = req.body;
    const user = users.get(phone);
    
    if (user) {
        user.status = USER_STATUS.APPROVED;
        
        const approvalMessage = `√ìtimas not√≠cias, ${user.name}!

üéâ Seu cadastro para a unidade ${user.block} ${user.unit} foi APROVADO pela administra√ß√£o.

A partir de agora, voc√™ j√° pode registrar e acompanhar ocorr√™ncias por aqui.

Seja muito bem-vindo(a)!

Como posso ajudar hoje?`;

        await sendWhatsAppInteractiveMessage(phone, approvalMessage, [
            { type: "reply", reply: { id: "new_occurrence", title: "1Ô∏è‚É£ üÜï Nova Ocorr√™ncia" } },
            { type: "reply", reply: { id: "view_occurrences", title: "2Ô∏è‚É£ üîé Ver Ocorr√™ncias" } }
        ]);
        
        // Send approval event to state machine
        sendEvent(phone, 'APPROVE_USER', user);
        
        res.json({ success: true });
    } else {
        res.status(404).json({ error: "User not found" });
    }
});

app.post("/api/users/reject", async (req, res) => {
    const { phone } = req.body;
    const user = users.get(phone);
    
    if (user) {
        user.status = USER_STATUS.REJECTED;
        
        const rejectionMessage = `Ol√°, ${user.name}.

A administra√ß√£o analisou sua solicita√ß√£o de cadastro para a unidade ${user.block} ${user.unit} e n√£o p√¥de aprov√°-la no momento.

Por favor, entre em contato diretamente com a administra√ß√£o para esclarecer a situa√ß√£o.`;

        await sendWhatsAppMessage(phone, rejectionMessage);
        
        // Send rejection event to state machine
        sendEvent(phone, 'REJECT_USER');
        
        res.json({ success: true });
    } else {
        res.status(404).json({ error: "User not found" });
    }
});

app.post("/api/occurrences/update", async (req, res) => {
    const { protocol, status, comment } = req.body;
    const occurrence = occurrences.get(protocol);
    
    if (occurrence) {
        occurrence.status = status;
        occurrence.updatedAt = new Date();
        
        if (comment) {
            occurrence.comments.push({
                date: new Date().toLocaleDateString('pt-BR'),
                author: "Gest√£o",
                text: comment
            });
        }
        
        const user = users.get(occurrence.userId);
        let statusText = status === OCCURRENCE_STATUS.RESOLVED ? "‚úÖ RESOLVIDA" :
                        status === OCCURRENCE_STATUS.IN_PROGRESS ? "‚öôÔ∏è EM ANDAMENTO" :
                        status === OCCURRENCE_STATUS.WAITING_RESPONSE ? "‚ùì AGUARDANDO RESPOSTA" :
                        "‚ùå CANCELADA";
        
        const updateMessage = `Ol√°, ${user.name}.

Tenho uma atualiza√ß√£o sobre sua ocorr√™ncia! Referente a:

**Protocolo: #${protocol}**
"${occurrence.description.substring(0, 50)}${occurrence.description.length > 50 ? '...' : ''}"

**Novo Status:** ${statusText}

${comment ? `**Coment√°rio da gest√£o:** "${comment}"` : ''}`;

        await sendWhatsAppMessage(occurrence.userId, updateMessage);
        
        // If resolved, ask for feedback
        if (status === OCCURRENCE_STATUS.RESOLVED) {
            setTimeout(async () => {
                const feedbackMessage = `Sua ocorr√™ncia [Protocolo: #${protocol}] foi resolvida!

Gostar√≠amos de saber sua opini√£o:`;

                await sendWhatsAppInteractiveMessage(occurrence.userId, feedbackMessage, [
                    { type: "reply", reply: { id: "feedback_excellent", title: "1Ô∏è‚É£ Excelente" } },
                    { type: "reply", reply: { id: "feedback_good", title: "2Ô∏è‚É£ Bom" } },
                    { type: "reply", reply: { id: "feedback_regular", title: "3Ô∏è‚É£ Regular" } },
                    { type: "reply", reply: { id: "feedback_bad", title: "4Ô∏è‚É£ Ruim" } },
                    { type: "reply", reply: { id: "feedback_terrible", title: "5Ô∏è‚É£ P√©ssimo" } }
                ]);
                
                // Transition to feedback state
                const service = getOrCreateStateMachine(occurrence.userId);
                service.send({ type: 'OCCURRENCE_RESOLVED', data: { protocol } });
            }, 2000);
        }
        
        res.json({ success: true });
    } else {
        res.status(404).json({ error: "Occurrence not found" });
    }
});

// Testing endpoints
app.get("/api/users", (req, res) => {
    const userList = Array.from(users.entries()).map(([phone, user]) => ({
        phone,
        ...user
    }));
    res.json(userList);
});

// Test list message endpoint
app.post("/api/test-list", async (req, res) => {
    const { phone } = req.body;
    
    if (!phone) {
        return res.status(400).json({ error: "Phone number required" });
    }

    // Example list message
    const sections = [
        {
            title: "Main Options",
            rows: [
                {
                    id: "new_occurrence",
                    title: "üÜï Nova Ocorr√™ncia",
                    description: "Registrar uma nova ocorr√™ncia no condom√≠nio"
                },
                {
                    id: "view_occurrences", 
                    title: "üîé Ver Ocorr√™ncias",
                    description: "Consultar suas ocorr√™ncias registradas"
                }
            ]
        },
        {
            title: "Other Options",
            rows: [
                {
                    id: "contact_admin",
                    title: "üìû Contatar Administra√ß√£o",
                    description: "Falar diretamente com a administra√ß√£o"
                },
                {
                    id: "help",
                    title: "‚ùì Ajuda",
                    description: "Como usar este sistema"
                }
            ]
        }
    ];

    await sendWhatsAppListMessage(
        phone,
        "Escolha uma das op√ß√µes abaixo:",
        "Ver op√ß√µes",
        sections,
        "Menu Principal",
        "Selecione a op√ß√£o desejada"
    );

    res.json({ success: true, message: "List message sent" });
});

app.get("/api/occurrences", (req, res) => {
    const occurrenceList = Array.from(occurrences.entries()).map(([protocol, occurrence]) => ({
        protocol,
        ...occurrence
    }));
    res.json(occurrenceList);
});

app.get("/api/conversations", (req, res) => {
    const conversationList = Array.from(userStateMachines.entries()).map(([phone, service]) => {
        const snapshot = service.getSnapshot();
        return {
            phone,
            currentState: snapshot.value,
            context: snapshot.context,
            done: snapshot.done
        };
    });
    res.json(conversationList);
});

app.listen(PORT, () => {
    console.log(`Server is running on port ${PORT}`);
    console.log("WhatsApp Bot with XState is ready to receive messages!");
    console.log(`\nAPI Endpoints available:`);
    console.log(`POST /api/users/approve - Approve user registration`);
    console.log(`POST /api/users/reject - Reject user registration`);
    console.log(`POST /api/occurrences/update - Update occurrence status`);
    console.log(`GET /api/users - List all users`);
    console.log(`GET /api/occurrences - List all occurrences`);
    console.log(`GET /api/conversations - List active XState machines`);
});
